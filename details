#!/usr/bin/env python3

import os
import json
import saxo

class FormatException(Exception):
  pass

bookurl = "https://openlibrary.org/api/books"

def parse_book_command(command):
  if command.startswith("-"):
    try:
      id_format, id_value = command.split(" ", 1)
    except ValueError:
      raise FormatError("Invalid book identifier format")
    
    # Lowercase and cut off the dash at the start
    id_format = id_format.lower()[1:]
    
    return id_format, id_value
  else:
    return "olid", command
 
@saxo.command()
def find_book(arg):
	usage = "Usage: .book [-olid|-isbn] <OLID/ISBN>"
	if not arg:
		return usage
	try:
		id_format, id_value = parse_book_command(arg)
	except FormatError:
		return usage
	if id_format != ("isbn" or "olid"):
		output = "\002Unsupported format.\002 " + usage
		return output
	if id_format == "isbn":
		page = saxo.request(bookurl, query={"bibkeys": 'ISBN:%s' % id_value, 'jscmd':'details', 'format': 'json'})
		data = json.loads(page["text"])
		ref = "ISBN:%s" % id_value
		defs = data[ref]
		try:
			olid = defs["details"]["identifiers"]["openlibrary"][0]
		except KeyError:
			olid = "not found"
		title = defs["details"]["title"]
		author = defs["details"]["authors"][0]["name"]
		greads = defs["details"]["identifiers"]["goodreads"][0] or "N/A"
		olurl = defs["info_url"] or "N/A"
		try:
			pages = defs["details"]["number_of_pages"] 
		except KeyError:
			pages = "n/a"
		try:
			weight = str(defs["details"]["weight"])
		except KeyError:
			weight = "N/A"
		revision = str(defs["details"]["revision"]) 
		try:
			notes = defs["details"]["notes"]
		except KeyError:
			notes = "N/A"
		try:
			description = defs["details"]["description"] 
		except KeyError:
			description = "N/A"
		output = "\002Title:\002 %s | \002Author:\002 %s | \002Pages:\002 %s | \002Revision:\002 %s | \002Weight:\002 %s | \002Notes:\002 %s | \002Description:\002 %s" % (title, author, pages, revision, weight, notes, description)
		saxo.client("send", "PRIVMSG", os.environ.get("SAXO_SENDER"), output)
		return 
	else:
		page = saxo.request(bookurl, query={"bibkeys": 'OLID:%s' % id_value, 'jscmd':'details', 'format': 'json'})
		data = json.loads(page["text"])
		ref = "OLID:%s" % id_value
		defs = data[ref]
		try:
			isbn = defs["details"]["identifiers"]["isbn_13"][0]
		except KeyError:
			isbn = "not found"
		title = defs["details"]["title"]
		try:
			author = defs["details"]["authors"][0]["name"]
		except:
			author = "N/A"
		try:
			greads = defs["details"]["identifiers"]["goodreads"][0]
		except KeyError:
			greads = "N/A"
		try: 
			olurl = defs["info_url"] 
		except KeyError:
			olurl = "N/A"
		try:
			pages = defs["details"]["number_of_pages"]
		except KeyError:
			pages = "N/A"		
		try:
			weight = str(defs["details"]["weight"])
		except KeyError:
			weight = "N/A"
		revision = str(defs["details"]["revision"])
		try:
			notes = defs["details"]["notes"]
		except KeyError:
			notes = "N/A"
		try:
			description = defs["details"]["description"] 
		except KeyError:
			description = "N/A"
		output = "\002Title:\002 %s | \002Author:\002 %s | \002Pages:\002 %s | \002Revision:\002 %s | \002Weight:\002 %s | \002Notes:\002 %s | \002Description:\002 %s" % (title, author, pages, revision, weight, notes, description)
		saxo.client("send", "PRIVMSG", os.environ.get("SAXO_SENDER"), output)
		return 
